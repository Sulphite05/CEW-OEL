 FILE *fptr;
    char *url = "http://api.openweathermap.org/data/2.5/weather?q=Karachi&appid=ac40257f82101fbacf3f2dee95130387";
    char outfilename[FILENAME_MAX] = "output.json";
    int i = 0;
    EnvironmentalData *data = NULL; // an array of struct EnvironmentalData

    // Beginning of CURL specific functions to retrieve data
    CURL *curl;
    CURLcode res;
    curl = curl_easy_init();
    if (curl)
    {
        fptr = fopen(outfilename, "wb");
        curl_easy_setopt(curl, CURLOPT_URL, url);                  // sets option of URL
        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_file); // sets option of write function
        curl_easy_setopt(curl, CURLOPT_WRITEDATA, fptr);           // sets option of write data stream
        res = curl_easy_perform(curl);                             // performs the http request
        curl_easy_cleanup(curl);
        fclose(fptr);
    }
    else
    {
        printf("Failed to initialise CURL");
    }
    // End of CURL specific query setter

    data = realloc(data, sizeof(EnvironmentalData) * (i+1));
    data[i] = parse_data(cont); // retrieves global variable containing content of current query
    analyze_data(data[i]);
    save_data(data[i]);
    i += 1;
    return 0;

    static size_t write_file(void *contents, size_t size, size_t nmemb, void *file_name)
{   // arguments will be passed by default by curl function curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_file);
    size_t written = fwrite(contents, size, nmemb, (FILE *)file_name);
    cont = contents;
    return written;
}

EnvironmentalData parse_data(const char *json)
{

    cJSON *root = cJSON_Parse(json);
    cJSON_Print(root);
    EnvironmentalData data;

    if (root != NULL)
    {
        cJSON *mainObject = cJSON_GetObjectItem(root, "main");                      //hashmap
        cJSON *weatherObject = cJSON_GetObjectItemCaseSensitive(root, "weather");   //array
        cJSON *visibiltyObject = cJSON_GetObjectItem(root, "visibility");


        // Check if the "main" object and its properties exist
        if (mainObject != NULL && weatherObject != NULL)
        {
            cJSON *tempItem = cJSON_GetObjectItem(mainObject, "temp");
            cJSON *humidityItem = cJSON_GetObjectItem(mainObject, "humidity");
            cJSON *first_weather_entry = cJSON_GetArrayItem(weatherObject, 0);

            // Get the "description" field from the first element
            cJSON *description = cJSON_GetObjectItemCaseSensitive(first_weather_entry, "main");
            // Check if the temperature and humidity properties exist
            if (tempItem != NULL && humidityItem != NULL && description != NULL && visibiltyObject != NULL)
            {
                data.temperature = tempItem->valuedouble - 273;
                data.humidity = humidityItem->valuedouble;
                data.weatherDes = strdup(description->valuestring); // Copy the description string
                data.visibility = visibiltyObject->valuedouble;
            }
            else
            {
                // Handle missing properties
                printf("missing properties error");
                data.temperature = 0.0;
                data.humidity = 0.0;
                data.weatherDes = "NULL";
                data.visibility = 0.0;
            }
        }
        else
        {
            // Handle missing "main" object
            printf("missing main object");
            data.temperature = 0.0;
            data.humidity = 0.0;
            data.weatherDes = "NULL";
            data.visibility = 0.0;
        }

        cJSON_Delete(root);
    }
    else
    {
        // Handle JSON parsing error
        const char *error_ptr = cJSON_GetErrorPtr();
        if (error_ptr != NULL)
        {
            printf("JSON parsing error at position: %ld\n", error_ptr - json);
        }
        else
        {
            printf("JSON parsing error\nCheck for Wifi connection\n");
        }

        data.temperature = 0.0;
        data.humidity = 0.0;
        data.weatherDes = "NULL";
        data.visibility = 0.0;
    }
    return data;
}

void check_and_alert(EnvironmentalData data)
{
    if (data.temperature > 50.0)
    {
        system("echo 'Temperature alert' | mail -s 'Alert' user@example.com");

    }
}

void analyze_data(EnvironmentalData data)
{

    if (data.temperature > 30)
    {
        printf("High temperature alert: %f\n", data.temperature);
    }
}

void save_data(EnvironmentalData data)
{
    FILE *fp = fopen("environment_data.txt", "a");
    if (fp != NULL)
    {
        fprintf(fp, "Temperature: %5.2f, Humidity: %f, WeatherDescription: %s, Visibility: %f\n", data.temperature, data.humidity, data.weatherDes, data.visibility);
        fclose(fp);
    }
    else
    {
        // Handle file opening error
        printf("Failed to open file for writing data\n");
    }
}